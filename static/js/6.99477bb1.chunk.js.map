{"version":3,"sources":["utils/validators.js","components/common/FormsControls/FormsControls.jsx","components/login/Login.jsx"],"names":["required","value","maxLength","formLength","length","renderInput","input","meta","props","hasError","touched","error","className","renderTextarea","typeInput","LoginForm","onSubmit","handleSubmit","name","component","placeholder","validate","type","reduxForm","form","connect","getAuthLogIn","formData","Login","password","rememberMy"],"mappings":"wFAAA,oEAAO,IAAMA,EAAW,SAAAC,GACpB,IAAIA,EACJ,MAAO,0BAGEC,EAAY,SAACC,GAAD,OAAgB,SAACF,GACtC,GAAIA,EAAMG,OAASD,EAAY,MAAM,iBAAN,OAAwBA,EAAxB,e,kICHtBE,G,OAAc,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,KAASC,EAAY,gCAChDC,EAAWF,EAAKG,SAAWH,EAAKI,MACtC,OACI,6BACI,6BACI,2CAAWH,EAAWF,EAAtB,CAA6BM,UAAW,iBAAyBH,EAAW,QAAU,QAE1F,6BACKA,GAAY,0BAAMG,UAAU,uBAAuBL,EAAKI,WAO5DE,EAAiB,SAAC,EAA2BC,GAAe,IAAxCR,EAAuC,EAAvCA,MAAOC,EAAgC,EAAhCA,KAASC,EAAuB,gCAC9DC,EAAWF,EAAKG,SAAWH,EAAKI,MACtC,OACI,6BACI,6BACI,8CAAcH,EAAWF,EAAzB,CAAgCM,UAAW,iBAAyBH,EAAW,QAAU,QAE7F,6BACKA,GAAY,0BAAMG,UAAU,uBAAuBL,EAAKI,W,8IChBrEI,GAHkBb,YAAU,GAGhB,SAACM,GACb,OACI,0BAAMQ,SAAUR,EAAMS,cAClB,kBAAC,IAAD,CAAOC,KAAK,QAAQC,UAAWd,IAAae,YAAa,QAASC,SAAU,CAACrB,OAC7E,kBAAC,IAAD,aAAOkB,KAAK,WAAWC,UAAWd,IAAae,YAAa,WAAYC,SAAU,CAACrB,MAAnF,cAA2G,aAC3G,kBAAC,IAAD,CAAOkB,KAAK,aAAaC,UAAWd,IAAaiB,KAAK,aAH1D,aAII,4BAAQA,KAAK,UAAb,UACCd,EAAMG,OAAS,6BAAMH,EAAMG,UAKxCI,EAAYQ,YAAU,CAClBC,KAAM,SADED,CAETR,GAgBYU,sBAAQ,KAAM,CAACC,kBAAfD,EAbD,SAACjB,GAIX,OACI,6BACI,qCACA,kBAACO,EAAD,CAAWC,SANF,SAACW,GACdnB,EAAMkB,aAAaC,EAASC,MAAOD,EAASE,SAAUF,EAASG","file":"static/js/6.99477bb1.chunk.js","sourcesContent":["export const required = value => {\r\n    if (value) return undefined;\r\n    return 'This field is required';\r\n}\r\n\r\nexport const maxLength = (formLength) => (value) => {\r\n    if (value.length > formLength) return `max length is ${formLength} symbols`;\r\n    return undefined;\r\n};","import React from \"react\";\r\nimport styles from \"./FormsControls.css\";\r\n\r\nexport const renderInput = ({ input, meta, ...props }) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div>\r\n            <div >\r\n                <input {...props} {...input} className={'formValidate' + \" \"  + (hasError ? 'error' : \"\")} />\r\n            </div>\r\n            <div>\r\n                {hasError && <span className='validateDescription'>{meta.error}</span>}\r\n            </div>\r\n\r\n        </div>\r\n        )\r\n};\r\n\r\nexport const renderTextarea = ({ input, meta, ...props }, typeInput) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div>\r\n            <div >\r\n                <textarea {...props} {...input} className={'formValidate' + \" \"  + (hasError ? 'error' : \"\")} />\r\n            </div>\r\n            <div>\r\n                {hasError && <span className='validateDescription'>{meta.error}</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {getAuthLogIn} from \"../../Redux/auth-reducer\";\r\nimport {maxLength, required} from \"../../utils/validators\";\r\nimport {renderInput} from \"../common/FormsControls/FormsControls\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst maxFormLength = maxLength(5);\r\n\r\n\r\nlet LoginForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field name=\"Login\" component={renderInput} placeholder={'Login'} validate={[required]} />\r\n            <Field name=\"password\" component={renderInput} placeholder={'password'} validate={[required]} placeholder={'password'}/>\r\n            <Field name=\"rememberMy\" component={renderInput} type=\"checkbox\"/>rememberMy\r\n            <button type=\"submit\">Submit</button>\r\n            {props.error && <div>{props.error}</div>}\r\n        </form>\r\n    )\r\n}\r\n\r\nLoginForm = reduxForm({\r\n    form: 'Login'\r\n})(LoginForm)\r\n\r\n\r\nconst Login = (props) => {\r\n    const onsubmit = (formData) => {\r\n        props.getAuthLogIn(formData.Login, formData.password, formData.rememberMy)\r\n    }\r\n    return (\r\n        <div>\r\n            <h2>Login</h2>\r\n            <LoginForm onSubmit={onsubmit}/>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default connect(null, {getAuthLogIn})(Login);"],"sourceRoot":""}